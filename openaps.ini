[alias]
preflight = ! bash -c "openaps report invoke monitor/mmtune.json monitor/clock.json 2>/dev/null && json -f monitor/mmtune.json -e 'this.scanDetails = this.scanDetails.filter(function (d) { return d[2] > -99 });' -0 && grep -q T monitor/clock.json && echo PREFLIGHT OK || ( echo PREFLIGHT SLEEP; sleep 60; echo PREFLIGHT FAIL; exit 1 )"
history = ! bash -c "(openaps report invoke monitor/model.json monitor/status.json monitor/pump-history.json monitor/clock-zoned.json monitor/pump-history-zoned.json && test $(cat monitor/status.json | json bolusing) == false) || (echo Pump bolusing, waiting to pull history; exit 1)"
gather = report invoke monitor/active-basal-profile.json monitor/reservoir.json monitor/settings.json monitor/battery.json monitor/bg-targets.json monitor/insulin-sensitivities.json monitor/carb-ratios.json monitor/temp-basal-status.json monitor/meal.json monitor/latest-treatments.json predict/profile.json
latest-ns-treatment-time = ! bash -c "openaps use latest-treatments shell | json created_at"
format-latest-nightscout-treatments = ! bash -c "nightscout cull-latest-openaps-treatments monitor/pump-history-zoned.json monitor/model.json $(openaps latest-ns-treatment-time) > monitor/upload-treatments.json"
enact-old = ! bash -c "rm -vf predict/oref0.json; openaps report invoke predict/iob.json predict/oref0.json && if (cat predict/oref0.json && grep -q duration predict/oref0.json); then ( rm -vf control/enacted.json; openaps report invoke control/enacted.json; grep -q duration control/enacted.json ) && cat control/enacted.json 2>&1; else echo No action required; fi"
enact = ! bash -c "rm -vf predict/oref0.json; openaps report invoke predict/iob.json predict/oref0.json && if (cat predict/oref0.json && grep -q duration predict/oref0.json); then ( rm -vf control/enacted.json; openaps report invoke control/enacted.json ) && cat control/enacted.json 2>&1; else echo No action required; fi"
upload = ! bash -c "openaps format-latest-nightscout-treatments && test $(json -f monitor/upload-treatments.json -a created_at eventType | wc -l ) -gt 0 && (openaps use ns-upload shell treatments.json monitor/upload-treatments.json ) || echo \"No recent treatments to upload\""
upload-fake = ! bash -c "echo skipping upload"
status-upload = ! bash -c "openaps report invoke monitor/upload-status.json && (openaps use ns-upload shell devicestatus.json monitor/upload-status.json > /dev/null )"
wait-for-bg = ! bash -c "touch monitor/glucose.json; cp monitor/glucose.json monitor/last-glucose.json; while(diff -q monitor/last-glucose.json monitor/glucose.json); do echo -n .; sleep 10; openaps get-bg; done"
history-retry = ! bash -c "openaps history || (echo history failed, waiting before trying again && sleep 5 && openaps history)"
gather-and-upload = ! bash -c "openaps history-retry && openaps upload && (openaps gather || openaps gather)"
enact-and-upload = ! bash -c "openaps enact && openaps status-upload"
24h-etc = ! bash -c "openaps ns-temptargets; openaps report invoke monitor/pump-history24h.json monitor/pump-history24h-zoned.json monitor/glucose-ns24h.json predict/autosens.json monitor/cal-ns.json"
wait-loop = ! bash -c "openaps preflight && openaps gather-and-upload && openaps wait-for-bg && openaps enact-and-upload && openaps 24h-etc"
loop = ! bash -c "openaps preflight && openaps gather-and-upload && openaps get-bg && openaps enact-and-upload"
retry-loop-old = ! bash -c "openaps wait-loop || until( ! openaps preflight || openaps loop); do sleep 10; done"
retry-loop = ! bash -c "openaps wait-loop || openaps loop"
retry-dex = ! bash -c "openaps monitor-dex || openaps monitor-dex"
push = ! bash -c "(git push && echo 'pushed to github') || echo 'unable to push to github'"
glucose-local = report invoke monitor/glucose.json
glucose-ns = report invoke monitor/glucose-ns.json
get-bg = ! bash -c "rm -f monitor/glucose*.json && openaps glucose-local 2>/dev/null || ( openaps glucose-ns && grep -q sgv monitor/glucose-ns.json && openaps use raw shell monitor/glucose-ns.json monitor/cal-ns.json 250 > monitor/glucose.json )"
monitor-dex = report invoke monitor/dex/glucose.json monitor/dex/sensor.json monitor/dex/cal.json monitor/dex/mbg.json
get-bg-ex = ! bash -c "( openaps get-ns-glucose && cat monitor/ns-glucose.json | json -c \"minAgo=(new Date()-new Date(this.dateString))/60/1000; return minAgo < 10 && minAgo > -5 && this.glucose > 30\" | grep -q glucose && mv monitor/ns-glucose.json monitor/glucose.json ) || ( openaps monitor-cgm 2>/dev/null | tail -1 && grep -q glucose monitor/cgm-glucose.json && rsync -rtu monitor/cgm-glucose.json monitor/glucose.json )"
ns-temptargets = ! bash -c "curl -m 30 -s \"$NIGHTSCOUT_HOST/api/v1/treatments.json?find\[created_at\]\[\$gte\]=`date -d \"6 hours ago\" -Iminutes`&find\[eventType\]=Temporary+Target\" > settings/temptargets.json; exit 0 "

[vendor "openapscontrib.timezones"]
path = .
module = openapscontrib.timezones

[vendor "mmeowlink.vendors.mmeowlink"]
path = .
module = mmeowlink.vendors.mmeowlink

[device "pump-cl"]
vendor = openaps.vendors.medtronic
extra = secret.ini

[device "pump"]
vendor = mmeowlink.vendors.mmeowlink
extra = pump.ini

[device "tz"]
vendor = openapscontrib.timezones

[device "determine-basal"]
fields = iob current-temps glucose profile autosens meal
cmd = oref0-determine-basal
vendor = openaps.vendors.process
args = 

[device "calculate-iob"]
fields = history profile clock
cmd = oref0-calculate-iob
vendor = openaps.vendors.process
args = 

[device "detect-sensitivity"]
vendor = openaps.vendors.process
fields = glucose pumphistory isf basal_profile profile
cmd = oref0-detect-sensitivity
args = 

[device "raw"]
fields = glucose cal maxraw
cmd = oref0-raw
vendor = openaps.vendors.process
args = 

[device "latest-treatments"]
vendor = openaps.vendors.process
extra = latest-treatments.ini

[device "ns-status"]
fields = clock iob suggested enacted battery reservoir status mmtune
cmd = ns-status
vendor = openaps.vendors.process
args = 

[device "ns-bgnow"]
vendor = openaps.vendors.process
extra = ns-bgnow.ini

[device "ns-bg24h"]
vendor = openaps.vendors.process
extra = ns-bg24h.ini

[device "ns-cal"]
vendor = openaps.vendors.process
extra = ns-cal.ini

[device "ns-temptargets"]
vendor = openaps.vendors.process
extra = ns-temptargets.ini

[device "ns-upload"]
vendor = openaps.vendors.process
extra = ns-upload.ini

[device "get-profile"]
fields = settings bg-targets isf basals max-iob carb-ratios temptargets
cmd = oref0-get-profile
vendor = openaps.vendors.process
args = 

[device "meal"]
fields = pumphistory profile clock carbhistory glucose basalprofile
cmd = oref0
args = meal
vendor = openaps.vendors.process

[report "monitor/mmtune.json"]
device = pump
use = mmtune
reporter = JSON

[report "monitor/model.json"]
device = pump
use = model
reporter = JSON

[report "monitor/glucose-ns.json"]
device = ns-bgnow
use = shell
reporter = JSON

[report "monitor/glucose-ns24h.json"]
device = ns-bg24h
use = shell
reporter = JSON

[report "monitor/cal-ns.json"]
device = ns-cal
use = shell
reporter = JSON

[report "monitor/temptargets.json"]
device = ns-temptargets
use = shell
reporter = JSON

[report "monitor/pump-history.json"]
device = pump
hours = 6.0
use = iter_pump_hours
reporter = JSON

[report "monitor/pump-history-zoned.json"]
use = rezone
reporter = JSON
date = timestamp dateString start_at end_at created_at
adjust = missing
input = monitor/pump-history.json
device = tz
timezone = None
astimezone = True

[report "monitor/pump-history24h.json"]
device = pump
hours = 27.0
use = iter_pump_hours
reporter = JSON

[report "monitor/pump-history24h-zoned.json"]
use = rezone
reporter = JSON
date = timestamp dateString start_at end_at created_at
adjust = missing
input = monitor/pump-history24h.json
device = tz
timezone = None
astimezone = True

[report "monitor/clock.json"]
device = pump
use = read_clock
reporter = JSON

[report "monitor/clock-zoned.json"]
use = clock
reporter = JSON
astimezone = False
date = None
adjust = missing
input = monitor/clock.json
device = tz
timezone = PST

[report "monitor/temp-basal-status.json"]
device = pump
use = read_temp_basal
reporter = JSON

[report "monitor/active-basal-profile.json"]
device = pump
use = read_selected_basal_profile
reporter = JSON

[report "monitor/reservoir.json"]
device = pump
use = reservoir
reporter = JSON

[report "monitor/settings.json"]
device = pump
use = settings
reporter = JSON

[report "monitor/status.json"]
device = pump
use = read_status
reporter = JSON

[report "monitor/battery.json"]
device = pump
use = read_battery_status
reporter = JSON

[report "monitor/bg-targets.json"]
device = pump
use = read_bg_targets
reporter = JSON

[report "monitor/insulin-sensitivities.json"]
device = pump
use = read_insulin_sensitivies
reporter = JSON

[report "monitor/carb-ratios.json"]
device = pump
use = read_carb_ratios
reporter = JSON

[report "monitor/latest-treatments.json"]
device = latest-treatments
use = shell
reporter = text

[report "monitor/latest-treatments.json.old"]
device = latest-treatments
use = shell
json_default = []
reporter = JSON
remainder = []

[report "monitor/upload-status.json"]
use = shell
device = ns-status
clock = monitor/clock-zoned.json
iob = predict/iob.json
suggested = predict/oref0.json
enacted = control/enacted.json
battery = monitor/battery.json
reservoir = monitor/reservoir.json
status = monitor/status.json
mmtune = monitor/mmtune.json
reporter = JSON

[report "predict/profile.json"]
use = shell
carb-ratios = monitor/carb-ratios.json
reporter = text
basals = monitor/active-basal-profile.json
settings = monitor/settings.json
bg-targets = monitor/bg-targets.json
device = get-profile
isf = monitor/insulin-sensitivities.json
max-iob = max_iob.json
temptargets = settings/temptargets.json

[report "predict/iob.json"]
profile = predict/profile.json
use = shell
clock = monitor/clock-zoned.json
reporter = text
device = calculate-iob
history = monitor/pump-history-zoned.json

[report "predict/oref0.json"]
profile = predict/profile.json
use = shell
reporter = text
current-temps = monitor/temp-basal-status.json
device = determine-basal
iob = predict/iob.json
glucose = monitor/glucose.json
autosens = predict/autosens.json
meal = monitor/meal.json

[report "predict/autosens.json"]
profile = predict/profile.json
use = shell
reporter = text
basal_profile = monitor/active-basal-profile.json
json_default = True
pumphistory = monitor/pump-history24h-zoned.json
device = detect-sensitivity
remainder = []
isf = monitor/insulin-sensitivities.json
glucose = monitor/glucose-ns24h.json

[report "control/enacted.json"]
device = pump
input = predict/oref0.json
use = set_temp_basal
reporter = JSON

[report "control/ninja-enacted.json"]
device = pump
input = control/ninja-says.json
use = set_temp_basal
reporter = JSON

[device "cgm"]
vendor = openaps.vendors.dexcom
extra = cgm.ini

[report "monitor/glucose.json"]
device = cgm
count = 5
use = iter_glucose
reporter = JSON

[report "monitor/meal.json"]
profile = predict/profile.json
use = shell
reporter = text
clock = monitor/clock-zoned.json
json_default = True
pumphistory = monitor/pump-history24h-zoned.json
carbhistory = none
glucose = monitor/glucose.json
basalprofile = monitor/active-basal-profile.json
device = meal
remainder = []

[report "monitor/carb_ratios.json"]
device = pump
use = read_carb_ratios
reporter = JSON

[vendor "openxshareble"]
path = .
module = openxshareble

[device "share"]
vendor = openxshareble
extra = share.ini

[report "monitor/cgm-glucose.json"]
device = share
hours = 1.0
use = iter_glucose_hours
reporter = JSON

[report "monitor/dex/glucose.json"]
device = share
hours = 1.0
use = iter_glucose_hours
reporter = JSON

[report "monitor/dex/sensor.json"]
device = share
hours = 1.0
use = iter_sensor_hours
reporter = JSON

[report "monitor/dex/cal.json"]
device = share
hours = 1.0
use = iter_calibrations_hours
reporter = JSON

[report "monitor/dex/mbg.json"]
device = share
hours = 1.0
use = iter_meter_data_hours
reporter = JSON

